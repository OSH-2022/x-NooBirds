1. 3辆车走eight-shape
    obj_x[0] = eight_center[0]; 
    obj_y[0] = eight_center[1] - eight_len;
    initial_vel[0] = 1.0;
    obj_vx[0] = 0.0;
    obj_vy[0] = 1.0;
    obj_traj[0] = eight;
    obj_traj_seg[0] = EIGHT_VER_LINE;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = eight_center[0] + eight_len;
    obj_y[1] = eight_center[1];
    initial_vel[1] = 0.3;
    obj_vx[1] = -0.3;
    obj_vy[1] = 0.0;
    obj_traj[1] = eight;
    obj_traj_seg[1] = EIGHT_PAR_LINE;
    direction[1] = CLOCKWISE;
    angle[1] = pi;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.6;
    obj_vx[2] = -0.6;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;
2. 三辆车走eight-shape，速度较1慢一点
    obj_x[0] = eight_center[0]; 
    obj_y[0] = eight_center[1] - eight_len;
    initial_vel[0] = 0.3;
    obj_vx[0] = 0.0;
    obj_vy[0] = 0.3;
    obj_traj[0] = eight;
    obj_traj_seg[0] = EIGHT_VER_LINE;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = eight_center[0] + eight_len;
    obj_y[1] = eight_center[1];
    initial_vel[1] = 0.4;
    obj_vx[1] = -0.4;
    obj_vy[1] = 0.0;
    obj_traj[1] = eight;
    obj_traj_seg[1] = EIGHT_PAR_LINE;
    direction[1] = CLOCKWISE;
    angle[1] = pi;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.6;
    obj_vx[2] = -0.6;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;

const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;

#define OBJ_NUM       3
int is_adjust[OBJ_NUM] = {0};
long double initial_vel[OBJ_NUM]; 
// used by scheduler 1
// #define RATIO         5
// used by scheduler 1

#define UPPER_LEFT   0
#define UPPER_EDGE   1
#define UPPER_RIGHT  2
#define RIGHT_EDGE   3
#define BOTTOM_RIGHT 4
#define BOTTOM_EDGE  5
#define BOTTOM_LEFT  6
#define LEFT_EDGE    7

#define TRI_UP_CORNER    0
#define TRI_RIGHT_EDGE   1
#define TRI_RIGHT_CORNER 2
#define TRI_DOWN_EDGE    3
#define TRI_LEFT_CORNER  4
#define TRI_LEFT_EDGE    5

#define EIGHT_VER_LINE   0
#define EIGHT_RIGHT_CIR  1
#define EIGHT_PAR_LINE   2
#define EIGHT_LEFT_CIR   3

#define CLOCKWISE           0
#define COUNTER_CLOCKWISE   1

long double obj_radius[OBJ_NUM] = {200.0, 200.0, 200.0};  // a bug here
long double obj_x     [OBJ_NUM];
long double obj_y     [OBJ_NUM];
long double obj_vx    [OBJ_NUM];
long double obj_vy    [OBJ_NUM];
long double vel_adjust[OBJ_NUM][2];
long double safety_coe = 1.5
long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1200.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

3. 3辆车走eight-shape
const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;

#define OBJ_NUM       3

int is_adjust[OBJ_NUM] = {0};
long double initial_vel[OBJ_NUM];
// used by scheduler 1
// #define RATIO         5
// used by scheduler 1

#define UPPER_LEFT   0
#define UPPER_EDGE   1
#define UPPER_RIGHT  2
#define RIGHT_EDGE   3
#define BOTTOM_RIGHT 4
#define BOTTOM_EDGE  5
#define BOTTOM_LEFT  6
#define LEFT_EDGE    7

#define TRI_UP_CORNER    0
#define TRI_RIGHT_EDGE   1
#define TRI_RIGHT_CORNER 2
#define TRI_DOWN_EDGE    3
#define TRI_LEFT_CORNER  4
#define TRI_LEFT_EDGE    5

#define EIGHT_VER_LINE   0
#define EIGHT_RIGHT_CIR  1
#define EIGHT_PAR_LINE   2
#define EIGHT_LEFT_CIR   3

#define CLOCKWISE           0
#define COUNTER_CLOCKWISE   1

long double obj_radius[OBJ_NUM] = {200.0, 200.0, 200.0};
long double obj_x     [OBJ_NUM];
long double obj_y     [OBJ_NUM];
long double obj_vx    [OBJ_NUM];
long double obj_vy    [OBJ_NUM];
long double vel_adjust[OBJ_NUM][2];

long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1200.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

void scheduler_1();
void scheduler_2();
int collision_detection();
void print_location_verbose();
void print_location_concise();
long double return_velocity_angle(int id);
int unsafe_state_detector(int j, int k, long double jx, long double jy, long double jvx, long double jvy, long double kx, long double ky, long double kvx, long double kvy, long double coe);

int main(int argc, char **argv) {
    obj_x[0] = eight_center[0]; 
    obj_y[0] = eight_center[1] - eight_len;
    initial_vel[0] = 1.0;
    obj_vx[0] = 0.0;
    obj_vy[0] = 1.0;
    obj_traj[0] = eight;
    obj_traj_seg[0] = EIGHT_VER_LINE;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = eight_center[0] + eight_len;
    obj_y[1] = eight_center[1];
    initial_vel[1] = 0.4;
    obj_vx[1] = -0.4;
    obj_vy[1] = 0.0;
    obj_traj[1] = eight;
    obj_traj_seg[1] = EIGHT_PAR_LINE;
    direction[1] = CLOCKWISE;
    angle[1] = pi;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.6;
    obj_vx[2] = -0.6;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;

4. 1辆快车走圆形，2辆车走eight-shape
const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;

#define OBJ_NUM       3


long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1200.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

void scheduler_1();
void scheduler_2();
int collision_detection();
void print_location_verbose();
void print_location_concise();
long double return_velocity_angle(int id);
int unsafe_state_detector(int j, int k, long double jx, long double jy, long double jvx, long double jvy, long double kx, long double ky, long double kvx, long double kvy, long double coe);

int main(int argc, char **argv) {
    obj_x[0] = cir_center[0]; 
    obj_y[0] = cir_center[1] + cir_radius;
    initial_vel[0] = 1.0;
    obj_vx[0] = 1.0;
    obj_vy[0] = 0.0;
    obj_traj[0] = cir;
    obj_traj_seg[0] = 0;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = eight_center[0] + eight_len;
    obj_y[1] = eight_center[1];
    initial_vel[1] = 0.4;
    obj_vx[1] = -0.4;
    obj_vy[1] = 0.0;
    obj_traj[1] = eight;
    obj_traj_seg[1] = EIGHT_PAR_LINE;
    direction[1] = CLOCKWISE;
    angle[1] = pi;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.7;
    obj_vx[2] = -0.7;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;


5. 圆形，正方形和eight-shape
const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;

long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1200.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

void scheduler_1();
void scheduler_2();
int collision_detection();
void print_location_verbose();
void print_location_concise();
long double return_velocity_angle(int id);
int unsafe_state_detector(int j, int k, long double jx, long double jy, long double jvx, long double jvy, long double kx, long double ky, long double kvx, long double kvy, long double coe);

int main(int argc, char **argv) {
    obj_x[0] = cir_center[0]; 
    obj_y[0] = cir_center[1] + cir_radius;
    initial_vel[0] = 1.7;
    obj_vx[0] = 1.7;
    obj_vy[0] = 0.0;
    obj_traj[0] = cir;
    obj_traj_seg[0] = 0;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = rect_center[0] + rect_len;
    obj_y[1] = rect_center[1];
    initial_vel[1] = 0.7;
    obj_vx[1] = 0.0;
    obj_vy[1] = -0.7;
    obj_traj[1] = rect;
    obj_traj_seg[1] = RIGHT_EDGE;
    direction[1] = CLOCKWISE;
    angle[1] = 3 * pi / 2;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.3;
    obj_vx[2] = -0.3;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;

6. 8辆车，一半走圆形，一半走eight_shape
const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;

#define OBJ_NUM       8

long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1400.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

void initialize_car(int i, traj traj, int traj_seg, long double x, long double y, long double angle, long double vel, int direction);
void scheduler_1();
void scheduler_2();
int collision_detection();
void print_location_verbose();
void print_location_concise();
long double return_velocity_angle(int id);
int unsafe_state_detector(int j, int k, long double jx, long double jy, long double jvx, long double jvy, long double kx, long double ky, long double kvx, long double kvy, long double coe);

int main(int argc, char **argv) {
    initialize_car(0, eight,  EIGHT_VER_LINE, eight_center[0], eight_center[1] + eight_len, pi / 2, 0.5, CLOCKWISE);
    initialize_car(5, eight,  EIGHT_VER_LINE, eight_center[0], eight_center[1] - eight_len, 3 * pi / 2, 0.7, CLOCKWISE);
    initialize_car(6, eight,  EIGHT_PAR_LINE, eight_center[0] + eight_len, eight_center[1], 0.0, 0.3, CLOCKWISE);
    initialize_car(7, eight,  EIGHT_PAR_LINE, eight_center[0] - eight_len, eight_center[1], pi, 0.8, CLOCKWISE);

    initialize_car(1, cir, 0, 0, 0, pi / 4, 0.5, CLOCKWISE);
    initialize_car(2, cir, 0, 0, 0, 3 * pi / 4, 0.5, CLOCKWISE);
    initialize_car(3, cir, 0, 0, 0, 5 * pi / 4, 0.4, CLOCKWISE);
    initialize_car(4, cir, 0, 0, 0, 7 * pi / 4, 0.6, CLOCKWISE);

7. one circle and two eight-shape
const long double pi = 3.14159265358979323846;
const long double adj_step_size = 0.097;
const int adj_times = 10;


long double corner_radius = 200.0;

long double rect_center[2] = {0.0, 0.0};
long double rect_len = 1000.0;

long double cir_center[2] = {0.0, 0.0};
long double cir_radius = 1200.0;

long double tri_center[2];
long double tri_len;

long double eight_center[2] = {0.0};
long double eight_len = 1400.0;
long double eight_radius = 1400.0;

long double angle[OBJ_NUM];

int direction[OBJ_NUM];

int simulation_time = 1000000000;
int sim_time = 0;

enum traj {rect, cir, tri, playground, eight};
traj obj_traj[OBJ_NUM];
int obj_traj_seg[OBJ_NUM];

int corner_case[OBJ_NUM][OBJ_NUM] = {0};
// int critical_car[OBJ_NUM][OBJ_NUM][2 = {0};
int slow_car[OBJ_NUM][OBJ_NUM] = {0};

void scheduler_1();
void scheduler_2();
int collision_detection();
void print_location_verbose();
void print_location_concise();
long double return_velocity_angle(int id);
int unsafe_state_detector(int j, int k, long double jx, long double jy, long double jvx, long double jvy, long double kx, long double ky, long double kvx, long double kvy, long double coe);

int main(int argc, char **argv) {
    obj_x[0] = cir_center[0]; 
    obj_y[0] = cir_center[1] + cir_radius;
    initial_vel[0] = 1.0;
    obj_vx[0] = 1.0;
    obj_vy[0] = 0.0;
    obj_traj[0] = cir;
    obj_traj_seg[0] = 0;
    direction[0] = CLOCKWISE;
    angle[0] = pi / 2;

    obj_x[1] = eight_center[0] + eight_len;
    obj_y[1] = eight_center[1];
    initial_vel[1] = 0.4;
    obj_vx[1] = -0.4;
    obj_vy[1] = 0.0;
    obj_traj[1] = eight;
    obj_traj_seg[1] = EIGHT_PAR_LINE;
    direction[1] = CLOCKWISE;
    angle[1] = pi;

    obj_x[2] = eight_center[0] + eight_len;
    obj_y[2] = eight_center[1];
    initial_vel[2] = 0.7;
    obj_vx[2] = -0.7;
    obj_vy[2] = 0.0;
    obj_traj[2] = eight;
    obj_traj_seg[2] = EIGHT_LEFT_CIR;
    direction[2] = CLOCKWISE;
    angle[2] = pi;